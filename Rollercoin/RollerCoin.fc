using FaucetCollector.Script;
using OpenQA.Selenium;
using System;
using System.Collections.Generic;
using System.Linq;
//css_ref FaucetCollector.FaucetTemplates
//css_ref FaucetCollector.Utilities
class RollerCoin : FaucetScript
{

    public override FaucetSettings Settings
    {
        get
        {

            return new FaucetSettings ( "https://rollercoin.com" )
         {
            new FaucetSetting()
            {
                Name="User",
                Type=EditorType.TextBox,
                Required=true,
                Display="Email"
            },
            new FaucetSetting()
            {
                Name="Pass",
                Type=EditorType.Password,
                Required=true,
                Display="Password"
            },
            new FaucetSetting ( )
            {
                Name="Game",
                Type=EditorType.ComboBox,
                Items=ListOfGames,
                Default=ListOfGames.FirstOrDefault()

            }
        };
        }
    }

    //Available Games
    public enum Games
    {
        Coin-Flip,
    }

    public override void Start ( )
    {
        Title="Rollercoin";

        SuccessXPath="//div[@class='react-responsive-spritesheet-container__move']";
        FailXPath="//*[contains(@text(),'')]";

        base.Start ( );
    }
    // Get List of games.
    public List<string> ListOfGames
    {
        get
        {
            return Enum.GetNames ( typeof ( Games ) ).ToList ( );
        }
    }
    public override int DoLogin ( )
    {
        GoToUrl ( "https://rollercoin.com/sign-in" );
        Wait ( 1 );

        var UserBox=ElementByXPath("//input[@id='mail']");
        if ( !IsVisible ( UserBox ) )
        {
            return Fail ( "User box not visible" );
        }

        var PasswordBox=ElementByXPath("//input[@id='password']");
        if ( !IsVisible ( PasswordBox ) )
        {
            return Fail ( "Password box is not visible" );
        }

        var ButtonLogin=ElementByXPath("//button[@class='btn btn-default-btn w-100']");
        if ( !IsVisible ( ButtonLogin ) )
        {
            return Fail ( "Button login is not visible" );
        }
        SetText ( UserBox , GetSetting ( "User" ) );
        SetText ( PasswordBox , GetPassword ( "Pass" ) );


        var KeepSigned=ElementByXPath("//label[@for='keepSigned']");
        if ( IsVisible ( KeepSigned ) )
        {
            Click ( KeepSigned );
            Wait ( 1 );
        }

        Click ( ButtonLogin );

        Wait ( 1 );

        var Error=ElementByXPath("//p[@class='danger-text wrong-mail-error error-text']");
        if ( IsVisible ( Error ) )
        {
            Log ( Error.Text );
            if ( Error.Text.Contains ( "find user with password" ) )
            {
                Disable ( );
                return Fail ( "You need to put correctly your credentials" );
            }
        }
        return base.DoLogin ( );
    }

    public override bool IsLoggedIn ( )
    {
        return ElementByXPath ( "//a[@href='/exit']" )!=null;
    }

    //private const string XPathCoins2048="//img[contains(@src,'/static/img/gamePreview/7-small.png')]";
    //private const string XPathCoinFlip="//img[contains(@src,'/static/img/gamePreview/8-small.png')]";

    public int FindGamePosition ( Games game )
    {
        var Elements =ElementsByXPath("//p[@class='game-title']");
        if ( Elements.Count>0 )
        {
            return Elements.IndexOf ( Elements.FirstOrDefault ( x => x.Text.ToLower ( ).Contains ( ( game ).ToString ( ).ToLower ( ) ) ) );

        }

        return -1;


    }
    public IWebElement GetSpecificElement ( Games game )
    {
        int Position=FindGamePosition(game);
        var Buttons=ElementsByXPath("//button[@class='tree-dimensional-button btn-cyan w-100']");
        if ( Position>=0&&( Buttons.Count-1 )>=Position )
        {
            return Buttons[Position];
        }
        return Buttons[7];
    }
    public override int BeforeSolveFaucet ( )
    {
        var ButtonAcceptCookies=ElementByXPath("//button[@class='qc-cmp-button' and contains(text(),'I ACCEPT')]");
        if ( IsVisible ( ButtonAcceptCookies ) )
        {
            Click ( ButtonAcceptCookies );
            Wait ( );
        }
        return base.BeforeSolveFaucet ( );
    }
    public override int DoSolveFaucet ( )
    {
        GoToUrl ( "https://rollercoin.com/game/choose_game" );
        Wait ( 1 );



        var GameSelected=   (Games) Enum.Parse ( typeof ( Games ) , GetSetting ( "Game" ));
        Wait ( 5 );
        //var GameElem=GetSpecificElement(GameSelected);
        var GameElem=ElementByXPath("//div[7]//div[1]//div[2]//div[2]//div[2]//button[1]");
        if ( IsVisible ( GameElem ) )
        {


            Click ( GameElem );
            Wait ( );


            Wait ( );
            if ( GameSelected==Games.Coin-Flip )
            {
                FaucetCollector.FaucetTemplates.RollerCoinTemplate template=new FaucetCollector.FaucetTemplates.RollerCoinTemplate(this);
                template.PlayCoin-Flip ( );

            }

            Wait ( 15 );
            Log ( "Game successfully played" );
            IsSuccess=true;
            ClaimSuccess ( );

            return GetWaitSetting ( );




        }


        return base.DoSolveFaucet ( );
    }


}

